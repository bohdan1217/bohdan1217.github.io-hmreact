{"version":3,"sources":["rickandmorty/rickandmorty.view.js","rickandmorty/rickandmorty.controller.js","App.js","serviceWorker.js","index.js"],"names":["rickandmorty_view","Wrapper","styled","div","_templateObject","UserInfo","_templateObject2","Card","_templateObject3","Button","button","_templateObject4","ButtonDiv","_templateObject5","LoadingImg","img","_templateObject6","Name","_templateObject7","CharacterAPI","axios","create","baseURL","headers","Accept","Content-Type","Character","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pagination","users","isLoading","loadPage","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","get","concat","pageLoad","sent","setState","data","results","stop","prevPage","nextPage","isLoadingImage","_this2","react_default","createElement","src","alt","map","user","index","image","name","onClick","disabled","React","Component","App","rickandmorty_controller_Character","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4iDAEe,IAAAA,EAAA,CACXC,QAASC,IAAOC,IAATC,KAIPC,SAAUH,IAAOC,IAATG,KAORC,KAAML,IAAOC,IAATK,KAKJC,OAAQP,IAAOQ,OAATC,KAaNC,UAAWV,IAAOC,IAATU,KAGTC,WAAYZ,IAAOa,IAATC,KAKVC,KAAMf,IAAOC,IAATe,cCnCFC,SAAeC,EAAMC,OAAO,CAC9BC,QAAS,6CACTC,QAAS,CACLC,OAAQ,mBAAoBC,eAAgB,sBAI/BC,cACjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAKVQ,MAAQ,CACJC,WAAYR,EAAKD,MAAMS,WACvBC,MAAO,GACPC,WAAW,GATIV,EAanBW,SAbmBV,OAAAW,EAAA,EAAAX,CAAAY,EAAAC,EAAAC,KAaR,SAAAC,IAAA,IAAAC,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACgB9B,EAAa+B,IAAb,UAAAC,OAA2BvB,EAAKwB,WADhD,OACDP,EADCE,EAAAM,KAEPzB,EAAK0B,SAAS,CACVjB,MAAOQ,EAASU,KAAKC,QACrBlB,WAAW,IAJR,wBAAAS,EAAAU,SAAAb,MAbQhB,EAqBnB8B,SAAW,WACP9B,EAAKwB,WACLxB,EAAKW,WAELX,EAAK0B,SAAS,CACVhB,WAAU,KA1BCV,EA8BnB+B,SAAW,WACP/B,EAAKwB,WACLxB,EAAKW,WAELX,EAAK0B,SAAS,CACVhB,WAAU,KAnCCV,EAuCnBgC,eAAiB,gBArCbhC,EAAKwB,SAAW,EAChBxB,EAAKW,WAHUX,wEAyCX,IAAAiC,EAAA9B,KACA,OACIA,KAAKI,MAAMG,UAAYwB,EAAApB,EAAAqB,cAAC/D,EAAMc,WAAP,CAAkBkD,IAAKjC,KAAK6B,eAAgBK,IAAI,YACvEH,EAAApB,EAAAqB,cAAC/D,EAAMC,QAAP,KACI6D,EAAApB,EAAAqB,cAAC/D,EAAMK,SAAP,KACM0B,KAAKI,MAAME,MAAM6B,IAAI,SAACC,EAAMC,GACtB,GAAIA,EAAQP,EAAK1B,MAAMC,WACnB,OACI0B,EAAApB,EAAAqB,cAAC/D,EAAMO,KAAP,KACIuD,EAAApB,EAAAqB,cAAA,OAAKC,IAAKG,EAAKE,MAAOJ,IAAKE,EAAKG,OAChCR,EAAApB,EAAAqB,cAAC/D,EAAMiB,KAAP,KAAakD,EAAKG,UAO1CR,EAAApB,EAAAqB,cAAC/D,EAAMY,UAAP,KACIkD,EAAApB,EAAAqB,cAAC/D,EAAMS,OAAP,CAAc8D,QAASxC,KAAK2B,SAAUc,SAA4B,IAAlBzC,KAAKqB,UAArD,QACAU,EAAApB,EAAAqB,cAAC/D,EAAMS,OAAP,CAAc8D,QAASxC,KAAK4B,SAAUa,SAA4B,KAAlBzC,KAAKqB,UAArD,iBA7DeqB,IAAMC,WCD9BC,MARf,WACI,OACIb,EAAApB,EAAAqB,cAAA,WACGD,EAAApB,EAAAqB,cAACa,EAAD,CAAWxC,WAAY,MCMdyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOrB,EAAApB,EAAAqB,cAACqB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7fef65e3.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport default {\n    Wrapper: styled.div`\n        padding: 10px;\n        margin: 5px;\n    `,\n    UserInfo: styled.div`\n        padding: 10px;\n        width: auto;\n        font-size: 15px;\n        display: flex;\n        flex-wrap: wrap;\n    `,\n    Card: styled.div`\n        background-color: #F8F8FF;\n        padding: 10px;\n        margin: 5px;\n    `,\n    Button: styled.button`\n        height: 50px;\n        width: 100px;\n        margin: 12px;\n        cursor: pointer;\n        border-radius: 10px;\n        font-size: 15px;\n        background-color: #f14e4e;\n        text-align: center;\n        font-family: 'Roboto',sans-serif;\n        font-weight: 300;\n            text-decoration: none;\n    `,\n    ButtonDiv: styled.div`\n        text-align: center;\n    `,\n    LoadingImg: styled.img`\n        display: block;\n        margin: 0 auto;\n        width: auto;\n    `,\n    Name: styled.div`\n        font-size: 18px;\n        display: flex;\n        justify-content: center;\n        margin-top: 5px;\n        flex-wrap: wrap;\n    `\n}","import React from \"react\";\nimport Style from './rickandmorty.view';\nimport axios from \"axios\";\n\n\nconst CharacterAPI = axios.create({\n    baseURL: \"https://rickandmortyapi.com/api/character/\",\n    headers: {\n        Accept: 'application/json', 'Content-Type': 'application/json'\n    }\n});\n\nexport default class Character extends React.Component{\n    constructor(props) {\n        super(props);\n        this.pageLoad = 1;\n        this.loadPage();\n    }\n\n    state = {\n        pagination: this.props.pagination,\n        users: [],\n        isLoading: true\n    }\n\n\n    loadPage = async() =>{\n        const response = await CharacterAPI.get(`/?page=${this.pageLoad}`);\n        this.setState({\n            users: response.data.results,\n            isLoading: false\n        })\n    }\n\n    prevPage = () => {\n        this.pageLoad--;\n        this.loadPage();\n\n        this.setState({\n            isLoading:true\n        });\n    }\n\n    nextPage = () => {\n        this.pageLoad++;\n        this.loadPage();\n\n        this.setState({\n            isLoading:true\n        });\n    }\n\n    isLoadingImage = \"./loading.gif\";\n\n    render(){\n            return (\n                this.state.isLoading ? <Style.LoadingImg src={this.isLoadingImage} alt=\"loading\"/> :\n                <Style.Wrapper>\n                    <Style.UserInfo>\n                        { this.state.users.map((user, index) => {\n                                if (index < this.state.pagination) {\n                                    return (\n                                        <Style.Card>\n                                            <img src={user.image} alt={user.name}/>\n                                            <Style.Name>{user.name}</Style.Name>\n                                        </Style.Card>\n                                    )\n                                }\n                            })\n                        }\n                    </Style.UserInfo>\n                    <Style.ButtonDiv>\n                        <Style.Button onClick={this.prevPage} disabled={this.pageLoad === 1}>PREV</Style.Button>\n                        <Style.Button onClick={this.nextPage} disabled={this.pageLoad === 30}>NEXT</Style.Button>\n                    </Style.ButtonDiv>\n                </Style.Wrapper>\n            )\n        }\n}","import React from 'react';\nimport Character from \"./rickandmorty/rickandmorty.controller\";\n\nfunction App() {\n    return (\n        <div>\n           <Character pagination={9}/>\n        </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}